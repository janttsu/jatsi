/* Jatsi 1.8.2004 Johannes Söderlund */import java.awt.*;import javax.swing.*;import java.awt.event.*;import java.io.*;public class Jatsi implements KeyListener, MouseListener {    public static void main(String[] args) {        Jatsi a = new Jatsi();        a.open();    }    JFrame frame = new Kehys();    int x;    Color puna = new Color(128, 0, 0);    static Color vaalea = new Color(244, 128, 128);    static int[] pisteet = new int[18];    JPanel p = new JPanel(new GridLayout(1, 0));    boolean heittoMahdollinen;    static byte h;    static int tulos;    static byte[] nopat = new byte[5];    byte kopio[] = new byte[5];    static boolean[] lukittu = new boolean[5];    static boolean kaytetty[] = new boolean[15];    byte eteneminen;    static int[][] taulukko = new int[15][4];    static int[][] koordinaatit = new int[7][4];    /* koordinaatit     0 heittopainike     1 ok     2 valikkoon     3 uusi peli     4 näytä toplista     5 lopeta     6 tietoja     */    static int[] nopX = new int[5];    String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ";    static String pelaajanNimi; // toplista    static int nyt;    static int[] top = new int[10];    static String[] topn = new String[10];    int siirto;    static byte tilanne;    /* tilanne     0 valikko     1 peli menossa     2 toplista     3 nimen kysyminen     4 tietoja     */    public void open() {        // ------------------------------------------------- koko        Container c = frame.getContentPane();        frame.setContentPane(c);        c.setLayout(new GridLayout(1, 0));        p.add(new Kuva());        p.addMouseListener(this);        p.setPreferredSize(new Dimension(360, 320));        c.add(p);        frame.pack();        // ------------------------------------------------- käyntiin        luePisteet();        kirjoitaPisteet();        tilanne = 0;        p.repaint();        frame.addKeyListener(this);        frame.setVisible(true);    }    public void seuraava() {        eteneminen++;        if (eteneminen == 15) {            paivita();            tilanne = 2;            nyt = 10;            pelaajanNimi = "";            for (int i = 0; i < 10; i++) {                if (pisteet[17] > top[i]) {                    siirto = i;                    tilanne = 3;                    p.repaint();                    break;                }            }            p.repaint();        } else {            h = 0;            for (int i = 0; i < lukittu.length; i++) {                lukittu[i] = false;            }            paivita();            p.repaint();            heittoMahdollinen = true;        }    }    public void paivita() {        pisteet[6] = pisteet[0] + pisteet[1] + pisteet[2] + pisteet[3]                + pisteet[4] + pisteet[5];        if (pisteet[6] > 62) {            pisteet[7] = 50;        } else {            pisteet[7] = 0;        }        pisteet[17] = 0;        for (int a = 6; a < 17; a++) {            pisteet[17] += pisteet[a];        }    }    public void luePisteet() {        try {            ObjectInputStream in = new ObjectInputStream(                    new FileInputStream("top10.dat"));            topn = (String[]) in.readObject();            top = (int[]) in.readObject();        } catch (Exception e) {}    }    public void kirjoitaPisteet() {        try {            ObjectOutputStream out = new ObjectOutputStream(                    new FileOutputStream("top10.dat"));            out.writeObject(topn);            out.writeObject(top);        } catch (Exception e) {}    }    public void siirraPisteet(int luku) {        for (int i = 9; i >= luku; i = i - 1) {            if (i == luku) {                top[i] = pisteet[17];                topn[i] = pelaajanNimi;                nyt = i;            } else {                top[i] = top[i - 1];                topn[i] = topn[i - 1];            }        }    }    public void lahdeLiikkeelle() {        for (int i = 0; i < lukittu.length; i++) {            lukittu[i] = false;        }        for (int a = 0; a < kaytetty.length; a++) {            kaytetty[a] = false;        }        for (int b = 0; b < pisteet.length; b++) {            pisteet[b] = 0;        }        eteneminen = 0;        h = 0;        heittoMahdollinen = true;        tilanne = 1;        aloita();    }    public void aloita() {        if (h == 3) {            heittoMahdollinen = false;        }        for (int i = 0; i < 5; i++) {            if (lukittu[i] == false) {                rollValue(6);                nopat[i] = (byte) tulos;            }        }        p.repaint();    }    public void lajittele() {        byte[] laji = new byte[5];        for (int i = 0; i < 5; i++) {            kopio[i] = nopat[i];        }        java.util.Arrays.sort(kopio);        laji[0] = kopio[4];        laji[1] = kopio[3];        laji[2] = kopio[2];        laji[3] = kopio[1];        laji[4] = kopio[0];        for (int i = 0; i < 5; i++) {            kopio[i] = laji[i];        }    }    public void keyPressed(KeyEvent e) {        if (tilanne == 3) {            char key = e.getKeyChar();            int takas = e.getKeyCode();            if (takas == KeyEvent.VK_BACK_SPACE) {                char[] chars = pelaajanNimi.toCharArray();                pelaajanNimi = "";                for (int i = 0; i < chars.length - 1; i++) {                    pelaajanNimi += chars[i];                }            } else if (takas == KeyEvent.VK_ENTER) {                if (pelaajanNimi.equals("")) {                    pelaajanNimi = "Pelaaja";                }                siirraPisteet(siirto);                tilanne = 2;                kirjoitaPisteet();                p.repaint();            } else {                char[] koko = pelaajanNimi.toCharArray();                if (koko.length < 15) {                    boolean laitettu = false;                    char key2 = Character.toUpperCase(key);                    char[] kirj = alphabet.toCharArray();                    for (int i = 0; i < kirj.length; i++) {                        for (int a = 0; a < kirj.length; a++) {                            if (kirj[a] == key2) {                                if (laitettu == false) {                                    pelaajanNimi += key;                                    laitettu = true;                                }                            }                        }                    }                }            }            p.repaint();        }    }    public void keyReleased(KeyEvent e) {}    public void keyTyped(KeyEvent e) {}    public void mouseClicked(MouseEvent me) {}    public void mouseEntered(MouseEvent me) {}    public void mousePressed(MouseEvent me) {        int x = me.getX();        int y = me.getY();        if (tilanne == 0) {            if (x > koordinaatit[3][0] // uusi peli                    && x < (koordinaatit[3][0] + koordinaatit[3][2])                    && y < koordinaatit[3][1] + koordinaatit[3][3]                    && y > koordinaatit[3][1]) {                lahdeLiikkeelle();            } else   if (x > koordinaatit[4][0] // toplistalle                    && x < (koordinaatit[4][0] + koordinaatit[4][2])                    && y < koordinaatit[4][1] + koordinaatit[4][3]                    && y > koordinaatit[4][1]) {                tilanne = 2;                nyt = -1;                p.repaint();            } else   if (x > koordinaatit[5][0] // lopetus                    && x < (koordinaatit[5][0] + koordinaatit[5][2])                    && y < koordinaatit[5][1] + koordinaatit[5][3]                    && y > koordinaatit[5][1]) {                System.exit(0);            } else   if (x > koordinaatit[6][0] // tietoja                    && x < (koordinaatit[6][0] + koordinaatit[6][2])                    && y < koordinaatit[6][1] + koordinaatit[6][3]                    && y > koordinaatit[6][1]) {                tilanne = 4;                p.repaint();            }        } else if (tilanne == 4) {            if (x > koordinaatit[2][0] // valikkoon takasin                    && x < (koordinaatit[2][0] + koordinaatit[2][2])                    && y < koordinaatit[2][1] + koordinaatit[2][3]                    && y > koordinaatit[2][1]) {                tilanne = 0;                p.repaint();            }        } else if (tilanne == 2) {            if (x > koordinaatit[2][0] // valikkoon takasin                    && x < (koordinaatit[2][0] + koordinaatit[2][2])                    && y < koordinaatit[2][1] + koordinaatit[2][3]                    && y > koordinaatit[2][1]) {                tilanne = 0;                p.repaint();            }        } else if (tilanne == 3) {            if (x > koordinaatit[1][0]                    && x < (koordinaatit[1][0] + koordinaatit[1][2])                    && y < koordinaatit[1][1] + koordinaatit[1][3]                    && y > koordinaatit[1][1]) {                if (tilanne == 3) {                    if (pelaajanNimi.equals("")) {                        pelaajanNimi = "Pelaaja";                    }                    siirraPisteet(siirto);                    tilanne = 2;                    kirjoitaPisteet();                    p.repaint();                }            }        } else if (tilanne == 1) {            for (int i = 0; i < 5; i++) {                if (h > 0) {                    if (x > nopX[i] && x < (nopX[i] + 60) && y < 70 && y > 10) {                        if (lukittu[i] == false) {                            lukittu[i] = true;                        } else {                            lukittu[i] = false;                        }                        p.repaint();                    }                }            }            if (x > koordinaatit[0][0]                    && x < (koordinaatit[0][0] + koordinaatit[0][2])                    && y < koordinaatit[0][1] + koordinaatit[0][3]                    && y > koordinaatit[0][1]) {                if (heittoMahdollinen == true) {                    h++;                    aloita();                }            } else if (x > taulukko[0][0]                    && x < (taulukko[0][0] + taulukko[0][2])                    && y < taulukko[0][1]                    && y > (taulukko[0][1] - taulukko[0][3])                    && kaytetty[0] == false && h > 0) {                lajittele();                int l = 0;                for (int i = 0; i < 5; i++) {                    if (kopio[i] == 1) {                        l++;                    }                }                pisteet[0] = l;                kaytetty[0] = true;                seuraava();                p.repaint();            } else if (x > taulukko[1][0]                    && x < (taulukko[1][0] + taulukko[1][2])                    && y < taulukko[1][1]                    && y > (taulukko[1][1] - taulukko[1][3])                    && kaytetty[1] == false && h > 0) {                lajittele();                int l = 0;                for (int i = 0; i < 5; i++) {                    if (kopio[i] == 2) {                        l = l + 2;                    }                }                pisteet[1] = l;                kaytetty[1] = true;                seuraava();                p.repaint();            } else if (x > taulukko[2][0]                    && x < (taulukko[2][0] + taulukko[2][2])                    && y < taulukko[2][1]                    && y > (taulukko[2][1] - taulukko[2][3])                    && kaytetty[2] == false && h > 0) {                lajittele();                int l = 0;                for (int i = 0; i < 5; i++) {                    if (kopio[i] == 3) {                        l = l + 3;                    }                }                pisteet[2] = l;                kaytetty[2] = true;                seuraava();                p.repaint();            } else if (x > taulukko[3][0]                    && x < (taulukko[3][0] + taulukko[3][2])                    && y < taulukko[3][1]                    && y > (taulukko[3][1] - taulukko[3][3])                    && kaytetty[3] == false && h > 0) {                lajittele();                int l = 0;                for (int i = 0; i < 5; i++) {                    if (kopio[i] == 4) {                        l = l + 4;                    }                }                pisteet[3] = l;                kaytetty[3] = true;                seuraava();                p.repaint();            } else if (x > taulukko[4][0]                    && x < (taulukko[4][0] + taulukko[4][2])                    && y < taulukko[4][1]                    && y > (taulukko[4][1] - taulukko[4][3])                    && kaytetty[4] == false && h > 0) {                lajittele();                int l = 0;                for (int i = 0; i < 5; i++) {                    if (kopio[i] == 5) {                        l = l + 5;                    }                }                pisteet[4] = l;                kaytetty[4] = true;                seuraava();                p.repaint();            } else if (x > taulukko[5][0]                    && x < (taulukko[5][0] + taulukko[5][2])                    && y < taulukko[5][1]                    && y > (taulukko[5][1] - taulukko[5][3])                    && kaytetty[5] == false && h > 0) {                lajittele();                int l = 0;                for (int i = 0; i < 5; i++) {                    if (kopio[i] == 6) {                        l = l + 6;                    }                }                pisteet[5] = l;                kaytetty[5] = true;                seuraava();                p.repaint();            } else if (x > taulukko[6][0]                    && x < (taulukko[6][0] + taulukko[6][2])                    && y < taulukko[6][1]                    && y > (taulukko[6][1] - taulukko[6][3])                    && kaytetty[6] == false && h > 0) {                lajittele();                int loyty[] = new int[4];                if (kopio[0] == kopio[1]) {                    loyty[0] = kopio[0] * 2;                } else {                    loyty[0] = 0;                }                if (kopio[1] == kopio[2]) {                    loyty[1] = kopio[1] * 2;                } else {                    loyty[1] = 0;                }                if (kopio[2] == kopio[3]) {                    loyty[2] = kopio[2] * 2;                } else {                    loyty[2] = 0;                }                if (kopio[3] == kopio[4]) {                    loyty[3] = kopio[3] * 2;                } else {                    loyty[3] = 0;                }                java.util.Arrays.sort(loyty);                pisteet[8] = loyty[3];                kaytetty[6] = true;                seuraava();                p.repaint();            } else if (x > taulukko[7][0]                    && x < (taulukko[7][0] + taulukko[7][2])                    && y < taulukko[7][1]                    && y > (taulukko[7][1] - taulukko[7][3])                    && kaytetty[7] == false && h > 0) {                lajittele();                if (kopio[0] == kopio[1] && kopio[2] == kopio[3]                        && kopio[0] != kopio[2]) {                    pisteet[9] = kopio[0] + kopio[1] + kopio[2] + kopio[3];                } else if (kopio[0] == kopio[1] && kopio[3] == kopio[4]                        && kopio[0] != kopio[3]) {                    pisteet[9] = kopio[0] + kopio[1] + kopio[3] + kopio[4];                } else if (kopio[1] == kopio[2] && kopio[3] == kopio[4]                        && kopio[1] != kopio[3]) {                    pisteet[9] = kopio[1] + kopio[2] + kopio[3] + kopio[4];                }                kaytetty[7] = true;                seuraava();                p.repaint();            } else if (x > taulukko[8][0]                    && x < (taulukko[8][0] + taulukko[8][2])                    && y < taulukko[8][1]                    && y > (taulukko[8][1] - taulukko[8][3])                    && kaytetty[8] == false && h > 0) {                lajittele();                if (kopio[0] == kopio[2]) {                    pisteet[10] = kopio[2] * 3;                } else if (kopio[1] == kopio[3]) {                    pisteet[10] = kopio[2] * 3;                } else if (kopio[2] == kopio[4]) {                    pisteet[10] = kopio[2] * 3;                }                kaytetty[8] = true;                seuraava();                p.repaint();            } else if (x > taulukko[9][0]                    && x < (taulukko[9][0] + taulukko[9][2])                    && y < taulukko[9][1]                    && y > (taulukko[9][1] - taulukko[9][3])                    && kaytetty[9] == false && h > 0) {                lajittele();                if (kopio[0] == kopio[3]) {                    pisteet[11] = kopio[2] * 4;                } else if (kopio[1] == kopio[4]) {                    pisteet[11] = kopio[2] * 4;                }                kaytetty[9] = true;                seuraava();                p.repaint();            } else if (x > taulukko[10][0]                    && x < (taulukko[10][0] + taulukko[10][2])                    && y < taulukko[10][1]                    && y > (taulukko[10][1] - taulukko[10][3])                    && kaytetty[10] == false && h > 0) {                lajittele();                if (kopio[0] == 5 && kopio[1] == 4 && kopio[2] == 3                        && kopio[3] == 2 && kopio[4] == 1) {                    pisteet[12] = 15;                }                kaytetty[10] = true;                seuraava();                p.repaint();            } else if (x > taulukko[11][0]                    && x < (taulukko[11][0] + taulukko[11][2])                    && y < taulukko[11][1]                    && y > (taulukko[11][1] - taulukko[11][3])                    && kaytetty[11] == false && h > 0) {                lajittele();                if (kopio[0] == 6 && kopio[1] == 5 && kopio[2] == 4                        && kopio[3] == 3 && kopio[4] == 2) {                    pisteet[13] = 20;                }                kaytetty[11] = true;                seuraava();                p.repaint();            } else if (x > taulukko[12][0]                    && x < (taulukko[12][0] + taulukko[12][2])                    && y < taulukko[12][1]                    && y > (taulukko[12][1] - taulukko[12][3])                    && kaytetty[12] == false && h > 0) {                lajittele();                if (kopio[0] == kopio[2] && kopio[3] == kopio[4]                        && kopio[0] != kopio[4]) {                    pisteet[14] = (kopio[0] * 3) + (kopio[4] * 2);                } else if (kopio[0] == kopio[1] && kopio[2] == kopio[4]                        && kopio[0] != kopio[4]) {                    pisteet[14] = (kopio[0] * 2) + (kopio[4] * 3);                }                kaytetty[12] = true;                seuraava();                p.repaint();            } else if (x > taulukko[13][0]                    && x < (taulukko[13][0] + taulukko[13][2])                    && y < taulukko[13][1]                    && y > (taulukko[13][1] - taulukko[13][3])                    && kaytetty[13] == false && h > 0) {                lajittele();                int l = 0;                for (int i = 0; i < 5; i++) {                    l = l + kopio[i];                }                pisteet[15] = l;                kaytetty[13] = true;                seuraava();                p.repaint();            } else if (x > taulukko[14][0]                    && x < (taulukko[14][0] + taulukko[14][2])                    && y < taulukko[14][1]                    && y > (taulukko[14][1] - taulukko[14][3])                    && kaytetty[14] == false && h > 0) {                lajittele();                if (kopio[0] == kopio[4]) {                    pisteet[16] = 50;                }                kaytetty[14] = true;                seuraava();                p.repaint();            }        }    }    public void mouseReleased(MouseEvent me) {}    public void mouseExited(MouseEvent me) {}    public void rollValue(int maxArvo) {        double valiArvo = Math.random() * maxArvo;        tulos = (int) Math.floor(valiArvo) + 1;    }}class Kuva extends JPanel {    public void paintComponent(Graphics g) {        super.paintComponent(g);        Dimension d = getSize();        Graphics2D g2 = (Graphics2D) g;        g.setColor(new Color(128, 0, 0));        g.fillRect(0, 0, d.width, d.height);        int x;        int y;        String s;        Font f = new Font("Verdana", Font.PLAIN, 12);        FontMetrics fm = g.getFontMetrics(f);        Font f3 = new Font("Verdana", Font.PLAIN, 16);        FontMetrics fm3 = g.getFontMetrics(f3);        Font f5 = new Font("Verdana", Font.BOLD, 20);        FontMetrics fm5 = g.getFontMetrics(f5);        Font f6 = new Font("Verdana", Font.BOLD, 11);        FontMetrics fm6 = g.getFontMetrics(f6);        if (Jatsi.tilanne == 1) {            x = 10;            y = 10;            for (int n = 0; n < 5; n++) {                if (Jatsi.lukittu[n] == false) {                    g.setColor(Color.white);                } else {                    g.setColor(Jatsi.vaalea);                }                g.fillRoundRect(x, y, 60, 60, 20, 20);                Jatsi.nopX[n] = x;                g.setColor(Color.black);                g.drawRoundRect(x, y, 60, 60, 20, 20);                if (Jatsi.nopat[n] > 1) {                    g.fillOval(x + 3, y + 3, 12, 12);                    g.fillOval(x + 45, y + 45, 12, 12);                }                if (Jatsi.nopat[n] > 3) {                    g.fillOval(x + 45, y + 3, 12, 12);                    g.fillOval(x + 3, y + 45, 12, 12);                }                if (Jatsi.nopat[n] == 6) {                    g.fillOval(x + 3, y + 24, 12, 12);                    g.fillOval(x + 45, y + 24, 12, 12);                }                if (Jatsi.nopat[n] % 2 == 1) {                    g.fillOval(x + 24, y + 24, 12, 12);                }                x += 70;            }            if (Jatsi.h == 3) {                s = "Heitto 3 / 3";            } else {                s = "Heitto " + (Jatsi.h + 1) + " / 3";            }            // ------------------------------------------------- heittopainike            x = (d.width - fm.stringWidth(s)) / 2;            y = 100;            g.setColor(Color.white);            g.fillRoundRect(x - 10, y - 17, fm.stringWidth(s) + 20,                    fm.getHeight() + 7, 20, 20);            g.setColor(Color.black);            g.drawRoundRect(x - 10, y - 17, fm.stringWidth(s) + 20,                    fm.getHeight() + 7, 20, 20);            Jatsi.koordinaatit[0][0] = x - 10;            Jatsi.koordinaatit[0][1] = y - 17;            Jatsi.koordinaatit[0][2] = fm.stringWidth(s) + 20;            Jatsi.koordinaatit[0][3] = fm.getHeight() + 7;            g.setColor(Color.black);            g.setFont(f);            g.drawString(s, x, y);            // ------------------------------------------------- taulukko            Font f2 = new Font("Verdana", Font.PLAIN, 12);            FontMetrics fm2 = g.getFontMetrics(f2);            g.setFont(f2);            g.setColor(Color.white);            int x11 = 20;            int x12 = 95;            int x21 = x11 + x12;            int x22 = 30;            int x31 = d.width - ((x11 * 2) + x12 + x22);            int x32 = x12;            int x41 = x31 + x32;            String[] nimet = new String[] {                "Ykköset:", "Kakkoset:", "Kolmoset:", "Neloset:", "Viitoset:",                "Kuutoset:", "Yhteensä:", "Bonus:", "Pari:", "Kaksi paria:",                "Kolmen suora:", "Neljän suora:", "Pieni suora:", "Suuri suora:",                "Täyskäsi:", "Sattuma:", "Jatsi:", "Yhteensä:",            };            y = 110;            for (int a = 0; a < 8; a++) {                y += 20;                g.drawString(nimet[a], x11, y);                if (a != 6 && a != 7) {                    Jatsi.taulukko[a][0] = x11;                    Jatsi.taulukko[a][1] = y;                    Jatsi.taulukko[a][2] = fm2.stringWidth(nimet[a]);                    Jatsi.taulukko[a][3] = fm2.getHeight();                }            }            y = 110;            for (int b = 0; b < 8; b++) {                y += 20;                if (b != 6 && b != 7) {                    if (Jatsi.pisteet[b] == 0 && Jatsi.kaytetty[b] == false) {                        s = "-";                    } else {                        s = "" + Jatsi.pisteet[b];                    }                } else {                    s = "" + Jatsi.pisteet[b];                }                x = x21 + x22 - fm2.stringWidth(s);                g.drawString(s, x, y);            }            y = 110;            for (int e = 8; e < 18; e++) {                y += 20;                g.drawString(nimet[e], x31, y);                if (e != 17) {                    Jatsi.taulukko[e - 2][0] = x31;                    Jatsi.taulukko[e - 2][1] = y;                    Jatsi.taulukko[e - 2][2] = fm2.stringWidth(nimet[e]);                    Jatsi.taulukko[e - 2][3] = fm2.getHeight();                }            }            y = 110;            for (int m = 8; m < 18; m++) {                y += 20;                if (m != 17) {                    if (Jatsi.pisteet[m] == 0 && Jatsi.kaytetty[m - 2] == false) {                        s = "-";                    } else {                        s = "" + Jatsi.pisteet[m];                    }                } else {                    s = "" + Jatsi.pisteet[m];                }                x = d.width - 30 - fm2.stringWidth(s);                g.drawString(s, x, y);            }        } else if (Jatsi.tilanne == 0) {            g.setFont(f5);            // ------------------------------------------------- logo            Image logo = Toolkit.getDefaultToolkit().getImage(                    Jatsi.class.getResource("logo.gif"));            g.drawImage(logo, 10, 10, this);            g.setColor(Color.white);            // ------------------------------------------------- uuden pelin aloitus            s = "Uusi peli";            x = (d.width - fm5.stringWidth(s)) / 2;            y = d.height - fm5.getHeight() * 3 - 3 * 40;            float dash1[] = { 2.0f};            BasicStroke dashed = new BasicStroke(1.0f, BasicStroke.CAP_BUTT,                    BasicStroke.JOIN_MITER, 10.0f, dash1, 0.0f);            g2.setStroke(dashed);            g2.drawRoundRect(x - 10, y - 25, fm5.stringWidth(s) + 20,                    fm5.getHeight() + 7, 20, 20);            Jatsi.koordinaatit[3][0] = x - 10;            Jatsi.koordinaatit[3][1] = y - 25;            Jatsi.koordinaatit[3][2] = fm5.stringWidth(s) + 20;            Jatsi.koordinaatit[3][3] = fm5.getHeight() + 7;            g.drawString(s, x, y);            // ------------------------------------------------- toplistalle            s = "Top 10 -lista";            x = (d.width - fm5.stringWidth(s)) / 2;            y += fm5.getDescent() + 40;            g2.drawRoundRect(x - 10, y - 25, fm5.stringWidth(s) + 20,                    fm5.getHeight() + 7, 20, 20);            Jatsi.koordinaatit[4][0] = x - 10;            Jatsi.koordinaatit[4][1] = y - 25;            Jatsi.koordinaatit[4][2] = fm5.stringWidth(s) + 20;            Jatsi.koordinaatit[4][3] = fm5.getHeight() + 7;            g.drawString(s, x, y);            // -------------------------------------------------tietoja            s = "Tietoja";            x = (d.width - fm5.stringWidth(s)) / 2;            y += fm5.getDescent() + 40;            g2.drawRoundRect(x - 10, y - 25, fm5.stringWidth(s) + 20,                    fm5.getHeight() + 7, 20, 20);            Jatsi.koordinaatit[6][0] = x - 10;            Jatsi.koordinaatit[6][1] = y - 25;            Jatsi.koordinaatit[6][2] = fm5.stringWidth(s) + 20;            Jatsi.koordinaatit[6][3] = fm5.getHeight() + 7;            g.drawString(s, x, y);            // ------------------------------------------------- lopetus            s = "Lopeta";            x = (d.width - fm5.stringWidth(s)) / 2;            y += fm5.getDescent() + 40;            g2.drawRoundRect(x - 10, y - 25, fm5.stringWidth(s) + 20,                    fm5.getHeight() + 7, 20, 20);            Jatsi.koordinaatit[5][0] = x - 10;            Jatsi.koordinaatit[5][1] = y - 25;            Jatsi.koordinaatit[5][2] = fm5.stringWidth(s) + 20;            Jatsi.koordinaatit[5][3] = fm5.getHeight() + 7;            g.drawString(s, x, y);        } else if (Jatsi.tilanne == 3) {            x = (d.width - fm3.stringWidth("Kirjoita nimesi:")) / 2;            y = 100;            g.setFont(f3);            g.setColor(Color.white);            g.drawString("Kirjoita nimesi:", x, y);            x = (d.width - fm3.stringWidth(Jatsi.pelaajanNimi)) / 2;            y += 40;            g.drawString(Jatsi.pelaajanNimi, x, y);            y += 5;            if (fm3.stringWidth(Jatsi.pelaajanNimi) < 1) {                x = (d.width - 10) / 2;                g.drawLine(x, y, x + 10, y);            } else {                x = (d.width - fm3.stringWidth(Jatsi.pelaajanNimi)) / 2;                x = x + fm3.stringWidth(Jatsi.pelaajanNimi);                g.drawLine(x, y, x + 10, y);            }            s = "OK";            x = (d.width - fm.stringWidth(s)) / 2;            y = 230;            g.fillRoundRect(x - 10, y - 17, fm.stringWidth(s) + 20,                    fm.getHeight() + 7, 20, 20);            g.setColor(Color.black);            g.drawRoundRect(x - 10, y - 17, fm.stringWidth(s) + 20,                    fm.getHeight() + 7, 20, 20);            Jatsi.koordinaatit[1][0] = x - 10;            Jatsi.koordinaatit[1][1] = y - 17;            Jatsi.koordinaatit[1][2] = fm.stringWidth(s) + 20;            Jatsi.koordinaatit[1][3] = fm.getHeight() + 7;            g.setColor(Color.black);            g.setFont(f);            g.drawString(s, x, y);        } else if (Jatsi.tilanne == 2) {            // ------------------------------------------------- logo            Image logo = Toolkit.getDefaultToolkit().getImage(                    Jatsi.class.getResource("logo.gif"));            g.drawImage(logo, 10, 10, this);            g.setColor(Color.white);            // ------------------------------------------------- toplista            boolean loyty = false;            y = 90;            g.setColor(Color.white);            g.setFont(f6);            for (int i = 0; i < Jatsi.top.length; i++) {                y += 15;                x = 100 - fm6.stringWidth((i + 1) + ".");                g.drawString((i + 1) + ".", x, y);                x = 120;                if (Jatsi.topn[i] != null) {                    g.drawString(Jatsi.topn[i], x, y);                }                x = d.width - 100 - fm6.stringWidth(Jatsi.top[i] + "");                if (Jatsi.top[i] > 0) {                    g.drawString(Jatsi.top[i] + "", x, y);                }                if (Jatsi.nyt == i) {                    loyty = true;                    g.drawLine(100, y + 5, d.width - 100, y + 5);                }            }            if (loyty == false && Jatsi.nyt != -1) {                y += 15;                x = 100 - fm6.stringWidth("...");                g.drawString("...", x, y);                x = 120;                g.drawString(Jatsi.pelaajanNimi, x, y);                x = d.width - 100 - fm6.stringWidth(Jatsi.pisteet[17] + "");                g.drawString(Jatsi.pisteet[17] + "", x, y);                g.drawLine(100, y + 5, d.width - 100, y + 5);            }            // ------------------------------------------------- takasin valikkoon            s = "Valikkoon";            x = (d.width - fm.stringWidth(s)) / 2;            y = d.height - 20;            g.fillRoundRect(x - 10, y - 17, fm.stringWidth(s) + 20,                    fm.getHeight() + 7, 20, 20);            g.setColor(Color.black);            g.drawRoundRect(x - 10, y - 17, fm.stringWidth(s) + 20,                    fm.getHeight() + 7, 20, 20);            Jatsi.koordinaatit[2][0] = x - 10;            Jatsi.koordinaatit[2][1] = y - 17;            Jatsi.koordinaatit[2][2] = fm.stringWidth(s) + 20;            Jatsi.koordinaatit[2][3] = fm.getHeight() + 7;            g.setColor(Color.black);            g.setFont(f);            g.drawString(s, x, y);        } else if (Jatsi.tilanne == 4) {            // ------------------------------------------------- tietoja            g.setColor(Color.white);            g.setFont(f5);            // ---------------------            s = "Jatsi";            y = 105;            x = (d.width - fm5.stringWidth(s)) / 2;            g.drawString(s, x, y);            g.setFont(f6);            // ---------------------            s = "1.8.2004";            y += 20;            x = (d.width - fm6.stringWidth(s)) / 2;            g.drawString(s, x, y);            // ---------------------            s = "© 2004 Johannes Söderlund";            y += 30;            x = (d.width - fm6.stringWidth(s)) / 2;            g.drawString(s, x, y);            // ---------------------            s = "Yhteystiedot:";            y += 30;            x = (d.width - fm6.stringWidth(s)) / 2;            g.drawString(s, x, y);            // ---------------------            s = "https://github.com/tanaos/jatsi";            y += 20;            x = (d.width - fm6.stringWidth(s)) / 2;            g.drawString(s, x, y);            // ---------------------            s = "jatsi@soderlund.in";            y += 15;            x = (d.width - fm6.stringWidth(s)) / 2;            g.drawString(s, x, y);            // ------------------------------------------------- logo            Image logo = Toolkit.getDefaultToolkit().getImage(                    Jatsi.class.getResource("logo.gif"));            g.drawImage(logo, 10, 10, this);            g.setColor(Color.white);            // ------------------------------------------------- takasin valikkoon            s = "Valikkoon";            x = (d.width - fm.stringWidth(s)) / 2;            y = d.height - 20;            g.fillRoundRect(x - 10, y - 17, fm.stringWidth(s) + 20,                    fm.getHeight() + 7, 20, 20);            g.setColor(Color.black);            g.drawRoundRect(x - 10, y - 17, fm.stringWidth(s) + 20,                    fm.getHeight() + 7, 20, 20);            Jatsi.koordinaatit[2][0] = x - 10;            Jatsi.koordinaatit[2][1] = y - 17;            Jatsi.koordinaatit[2][2] = fm.stringWidth(s) + 20;            Jatsi.koordinaatit[2][3] = fm.getHeight() + 7;            g.setColor(Color.black);            g.setFont(f);            g.drawString(s, x, y);        }    }}class Kehys extends JFrame {    public Kehys() {        setTitle("Jatsi");        setResizable(false);        setDefaultCloseOperation(EXIT_ON_CLOSE);        Toolkit tk = Toolkit.getDefaultToolkit();        setLocation(100, 100);    }}